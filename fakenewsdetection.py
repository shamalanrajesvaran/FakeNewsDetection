# -*- coding: utf-8 -*-
"""FakeNewsDetection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1crpSwNHr0QP6MKzoZxgDCmecxsZYtyTL
"""

## TF(Term Frequency): The number of times a word appears in a document is its Term Frequency. A higher value means a term appears more often than others, and so, the document is a good match when the term is part of the search terms.
## IDF (Inverse Document Frequency): Words that occur many times a document, but also occur many times in many others, may be irrelevant. IDF is a measure of how significant a term is in the entire corpus.

pip install numpy pandas sklearn

#Required Imports

import numpy as np
import pandas as pd
import itertools
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import PassiveAggressiveClassifier 
from sklearn.metrics import accuracy_score, confusion_matrix

#Reading the data

dt = pd.read_csv('/content/news.csv')

#gauge the shape and head of the dataset

dt.shape
dt.head()

#Getting the labels

labels = dt.label

labels.head()

"""# Splitting the Dataset to Training and Testing Sets"""

x_train, x_test, y_train, y_test = train_test_split(dt['text'], labels, test_size=0.2, random_state=7)

"""## Initializing the TfidfVectorizer"""

#Initialize the TfidfVectorizer

tfidf_vectorizer=TfidfVectorizer(stop_words = 'english', max_df = 0.7)

#Fit and transform train set, transform test set
tfidf_train = tfidf_vectorizer.fit_transform(x_train)
tfidf_test = tfidf_vectorizer.transform(x_test)

"""## Initialize PassiveAggressiveClassifier"""

#Initialize PassiveAggresiveClassifier

pa = PassiveAggressiveClassifier(max_iter=50)
pa.fit(tfidf_train, y_train)

#Prediction based on the test set and to calculate the accuracy

y_pred = pa.predict(tfidf_test)
score = accuracy_score(y_test, y_pred)
print(f'Accuracy: {round(score*100,2)}%')

"""## Confusion Matrix"""

#Confusion Matrix

confusion_matrix(y_test, y_pred, labels=['FAKE', 'REAL'])